//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace dosbox_staging_vct.Resources {
    using System;
    
    
    /// <summary>
    ///   Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
    /// </summary>
    // StronglyTypedResourceBuilder generó automáticamente esta clase
    // a través de una herramienta como ResGen o Visual Studio.
    // Para agregar o quitar un miembro, edite el archivo .ResX y, a continuación, vuelva a ejecutar ResGen
    // con la opción /str o recompile su proyecto de VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Language_en_GB {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Language_en_GB() {
        }
        
        /// <summary>
        ///   Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("dosbox_staging_vct.Resources.Language_en_GB", typeof(Language_en_GB).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
        ///   búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxAllowWriteProtectedFiles {
            get {
                return ResourceManager.GetString("HelpDosboxAllowWriteProtectedFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxAutoexecSection {
            get {
                return ResourceManager.GetString("HelpDosboxAutoexecSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxAutomount {
            get {
                return ResourceManager.GetString("HelpDosboxAutomount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxDosRate {
            get {
                return ResourceManager.GetString("HelpDosboxDosRate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Select a language to use: &apos;br&apos;, &apos;de&apos;, &apos;en&apos;, &apos;es&apos;, &apos;fr&apos;, &apos;it&apos;, &apos;nl&apos;, &apos;pl&apos; or &apos;ru&apos; (unset by default; this defaults to English).
        ///Notes:
        ///- This setting will override the &apos;LANG&apos; environment variable, if set.
        ///- The bundled &apos;resources/translations&apos; directory with the executable holds these files. Please keep it along-side
        ///the executable to support this feature..
        /// </summary>
        internal static string HelpDosboxLanguage {
            get {
                return ResourceManager.GetString("HelpDosboxLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxMachine {
            get {
                return ResourceManager.GetString("HelpDosboxMachine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxMcbFaultStrategy {
            get {
                return ResourceManager.GetString("HelpDosboxMcbFaultStrategy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxMemsize {
            get {
                return ResourceManager.GetString("HelpDosboxMemsize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxShellConfigShortcuts {
            get {
                return ResourceManager.GetString("HelpDosboxShellConfigShortcuts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxSpeedMods {
            get {
                return ResourceManager.GetString("HelpDosboxSpeedMods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxStartupVerbosity {
            get {
                return ResourceManager.GetString("HelpDosboxStartupVerbosity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxVesaModes {
            get {
                return ResourceManager.GetString("HelpDosboxVesaModes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxVga8dotFont {
            get {
                return ResourceManager.GetString("HelpDosboxVga8dotFont", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxVgaRenderPerScanline {
            get {
                return ResourceManager.GetString("HelpDosboxVgaRenderPerScanline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxVmemDelay {
            get {
                return ResourceManager.GetString("HelpDosboxVmemDelay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a .
        /// </summary>
        internal static string HelpDosboxVmemsize {
            get {
                return ResourceManager.GetString("HelpDosboxVmemsize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a English Aspect.
        /// </summary>
        internal static string HelpRenderAspect {
            get {
                return ResourceManager.GetString("HelpRenderAspect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a English IntegerScaling.
        /// </summary>
        internal static string HelpRenderIntegerScaling {
            get {
                return ResourceManager.GetString("HelpRenderIntegerScaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Number of display to use; values depend on OS and user settings (0 by default)..
        /// </summary>
        internal static string HelpSdlDisplay {
            get {
                return ResourceManager.GetString("HelpSdlDisplay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a What resolution to use for fullscreen: &apos;original&apos;, &apos;desktop&apos; or a fixed size, e.g. 1024x768 (&apos;desktop&apos; by default)..
        /// </summary>
        internal static string HelpSdlFullresolution {
            get {
                return ResourceManager.GetString("HelpSdlFullresolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Start directly in fullscreen (disabled by default).
        ///Run INTRO and see Special Keys for window control hotkeys..
        /// </summary>
        internal static string HelpSdlFullscreen {
            get {
                return ResourceManager.GetString("HelpSdlFullscreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Set the host&apos;s refresh rate:
        /// - auto: Use SDI rates, or VRR rates when in fullscreen on a high-refresh rate display (default).
        /// - sdi: Use serial device interface (SDI) rates, without further adjustment.
        /// - vrr: Deduct 3 Hz from the reported rate (best practice for VRR displays).
        /// - N: Specify custom refresh rate in Hz (decimal values are allowed; 23.000 is the allowed minimum)..
        /// </summary>
        internal static string HelpSdlHostRate {
            get {
                return ResourceManager.GetString("HelpSdlHostRate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Path to the mapper file (&apos;mapper-sdl2-XYZ.map&apos; by default, where XYZ is the current version).
        ///Pre-configured maps are bundled in &apos;resources/mapperfiles&apos;.
        ///These can be loaded by name, e.g., with &apos;mapperfile = xbox/xenon2.map&apos;.
        ///Note: The &apos;--resetmapper&apos; command line option only deletes the default mapper file..
        /// </summary>
        internal static string HelpSdlMapperfile {
            get {
                return ResourceManager.GetString("HelpSdlMapperfile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Mute the sound when the window is inactive (disabled by default)..
        /// </summary>
        internal static string HelpSdlMuteWhenInactive {
            get {
                return ResourceManager.GetString("HelpSdlMuteWhenInactive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Video system to use for output (&apos;opengl&apos; by default).
        ///&apos;texture&apos; and &apos;opengl&apos; use bilinear interpolation, &apos;texturenb&apos; and &apos;openglnb&apos; use nearest-neighbour (no-bilinear).
        ///Some shaders require bilinear interpolation, making that the safest choice.
        ///Deprecated values: openglpp, surface, texturepp..
        /// </summary>
        internal static string HelpSdlOutput {
            get {
                return ResourceManager.GetString("HelpSdlOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Pause emulation when the window is inactive (disabled by default)..
        /// </summary>
        internal static string HelpSdlPauseWhenInactive {
            get {
                return ResourceManager.GetString("HelpSdlPauseWhenInactive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Select the frame presentation mode:
        /// - auto: Intelligently time and drop frames to prevent emulation stalls, based on host and DOS frame rates (default).
        /// - cfr: Always present DOS frames at a constant frame rate.
        /// - vfr: Always present changed DOS frames at a variable frame rate..
        /// </summary>
        internal static string HelpSdlPresentationMode {
            get {
                return ResourceManager.GetString("HelpSdlPresentationMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Priority levels to apply when active and inactive, respectively. (&apos;auto auto&apos; by default)
        ///&apos;auto&apos; lets the host operating system manage the priority..
        /// </summary>
        internal static string HelpSdlPriority {
            get {
                return ResourceManager.GetString("HelpSdlPriority", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Use &apos;allow&apos; or &apos;block&apos; to override the SDL_VIDEO_ALLOW_SCREENSAVER environment variable which usually
        ///blocks the OS screensaver while the emulator is running (&apos;auto&apos; by default)..
        /// </summary>
        internal static string HelpSdlScreensaver {
            get {
                return ResourceManager.GetString("HelpSdlScreensaver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Render driver to use in &apos;texture&apos; output mode (&apos;auto&apos; by default).
        ///Use &apos;texture_renderer = auto&apos; for an automatic choice..
        /// </summary>
        internal static string HelpSdlTextureRenderer {
            get {
                return ResourceManager.GetString("HelpSdlTextureRenderer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Set the transparency of the DOSBox Staging screen (0 by default).
        ///From 0 (no transparency) to 90 (high transparency)..
        /// </summary>
        internal static string HelpSdlTransparency {
            get {
                return ResourceManager.GetString("HelpSdlTransparency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Set the host video driver&apos;s vertical synchronization (vsync) mode:
        /// - auto: Limit vsync to beneficial cases, such as when using an interpolating VRR display in fullscreen (default).
        /// - on: Enable vsync. This can prevent tearing in some games but will impact performance or drop frames when
        ///    the DOS rate exceeds the host rate (e.g. 70 Hz DOS rate vs 60 Hz host rate).
        /// - adaptive: Enables vsync when the frame rate is higher than the host rate, but disables it when the frame rate
        ///    drops below the hos [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string HelpSdlVsync {
            get {
                return ResourceManager.GetString("HelpSdlVsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Number of microseconds to allow rendering to block before skipping the next frame.
        ///For example, a value of 7000 is roughly half the frame time at 70 Hz.
        ///0 disables this and will always render (default)..
        /// </summary>
        internal static string HelpSdlVsyncSkip {
            get {
                return ResourceManager.GetString("HelpSdlVsyncSkip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Keep the console open if an error has occurred (enabled by default)..
        /// </summary>
        internal static string HelpSdlWaitonerror {
            get {
                return ResourceManager.GetString("HelpSdlWaitonerror", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Enable window decorations in windowed mode (enabled by default)..
        /// </summary>
        internal static string HelpSdlWindowDecorations {
            get {
                return ResourceManager.GetString("HelpSdlWindowDecorations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Set initial window position for windowed mode:
        /// - auto: Let the window manager decide the position (default).
        /// - X,Y: Set window position in X,Y format (e.g., 250,100). 0,0 is the top-left corner of the screen..
        /// </summary>
        internal static string HelpSdlWindowPosition {
            get {
                return ResourceManager.GetString("HelpSdlWindowPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Set intial window size for windowed mode. You can still resize the window after startup.
        ///- default: Select the best option based on your environment and other settings (such as whether aspect ratio correction is enabled).
        /// - small, medium, large (s, m, l): Size the window relative to the desktop.
        /// - WxH:  Specify window size in WxH format in logical units (e.g., 1024x768)..
        /// </summary>
        internal static string HelpSdlWindowresolution {
            get {
                return ResourceManager.GetString("HelpSdlWindowresolution", resourceCulture);
            }
        }
    }
}
